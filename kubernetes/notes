What are containers?
A container is a standard unit of software that packages up code and all its dependencies so that appliction runs quickly and reliably from one computing environemnt to another. 

Containers are like laptops than desktops. 

Laptop - Everything I need to use is packaged in one device. Portable and easily run it anywhere, like the coffee shop or an airplane. 

Containers put everything your software needs into one portable package. Operating system liabraries, application code, configuraion files, dependencies. Containers allow software to run consistently across different environments like your laptop, development, production or the cloud. 

Some advantages of Containers:
1. Portability
2. Consistency
3. Low Overhead

Container Runtimmes - a software used to run containers on a machine. There are many container runtimes are available in the market. Here is containerd. 



What is kubernetes?
Kubernetes, aka k8s, is an open-source system for automating deployment, scaling, and management of containerized applications. 

K8s helps you deploy containers across a pool of compute resources, such as servers. You can easily deploy multiple replicas of your application. Kubernetes makes it easy to scale up and scale down. Run more replicas of an application to scale up and run fewer raplicas to scale down. 

K8s can do plenty, like networking, security, and configuration management feature.

K8s cluster

A k8s cluster is a collection of worker machines that run containers. A control plane manages one or more worker nodes. 

A control plane - a collection of services that control the cluster. Users interact with the cluster using the control plane. It monitors the state of cluster. 

A worker node - A machine that run containers within the cluster. It runs and manages the containers on the node. It monitors the state of containers on the node and reports the satus back to the control plane. 
K8s Control plane - it consists of multiple individual components. These can be run anywhere, and you can run multiple instances of each component for high availibility. 

Kubelet - Worker nodes requires a container runtime to manage containers, and use a component called kubelet to manage kubernetes activity on the node. 

Kubeadm  - a tool to setup k8s cluster. 

Server setup - 3 servers - 1 server will act as control plane server - rest 2 will work as worker nodes. 


cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter

# Setup required sysctl params, these persist across reboots.
cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-iptables  = 1
net.ipv4.ip_forward                 = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF

# Apply sysctl params without reboot
sudo sysctl --system

sudo apt-get update && sudo apt-get install -y containerd

sudo mkdir /etc/containerd

sudo containerd config default | sudo tee /etc/containerd/config.toml

sudo systemctl restart containerd

In order to make container work on server, need to swap off

sudo swapoff -a 
sudo sed -ri '/\sswap\s/s/^#?/#/' /etc/fstab

sudo apt-get update && sudo apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common

sudo curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

sudo apt-get update

sudo apt-get install -y kubelet=1.22.0-00 kubeadm=1.22.0-00 kubectl=1.22.0-00

sudo apt-mark hold kubelet kubeadm kubectl

sudo kubeadm init --pod-network-cidr 192.168.0.0/16 --kubernetes-version 1.22.0

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config


kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml

kubeadm token create --print-join-command

run the output command on worker nodes with sudo 

Kubernetes Objects are persistent data entities stored by Kubernetes. They represent the state of your cluster. 

PODS - A group of one or more containers, with shared storage and network resources, with a specification for how to run the containers. There are many different types of Kubernetes Objects. Perhaps the most important is called the Pod. Pods are used to run and manage containers. 

POD specification basic - 
kind - it specifies the object type as POD. 


YAML - Kubernets objects are usually represented in the form of YAML data. 

apiVersion - The apiVersion in a YAML document specifies which version of the Kubernetes API the YAML data is compatiable with. 

Kubectl - it allows to run commands against K8s clusters. It can be used to deploy applications, inspect, and manage cluster resources, and view logs. It let you view, create, modify, and delete Kubneretes Objects. 

cloud_user@k8s-control:~$ cat myservice.yml
apiVersion: v1
kind: Service
metadata:
  name: myservice
spec:
  selector:
    app: myapp
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80


kubectl create -f myservice.yml --save-config
kubectl describe service myservice
kubectl apply -f myservice.yml
kubectl delete service myservice

vi nginx-pod.yml
apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  containers:
  - name: nginx
    image: nginx
    ports:
    - containerPort: 80

kubectl create -f nginx-pod.yml

vi redis-pod.yml
apiVersion: v1
kind: Pod
metadata:
  name: redis
spec:
  containers:
  - name: redis
    image: redis

kubectl create -f redis-pod.yml
kubectl get pods -o wide
curl <nginx IP address>
kubectl logs nginx

